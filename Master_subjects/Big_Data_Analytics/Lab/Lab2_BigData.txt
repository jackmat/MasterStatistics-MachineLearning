---
title: "Lab2"
author: "Carles Sans Fuentes"
date: "3rd of november of 2016"
output: pdf_document
---
id.liu: 920531-T252
name: carsa564


```{r include=FALSE}
library(RMySQL)

db <- dbConnect(MySQL(), 
                user = 'carsa564',
                password = 'Wx3RWcuT', 
                host = 'db-und.ida.liu.se',
                dbname = 'carsa564')
```



1) List all employees, i.e. all tuples in the jbemployee relation.
```{sql connection= db }

SELECT * FROM jbemployee;

```
+------+--------------------+--------+---------+-----------+-----------+
| id   | name               | salary | manager | birthyear | startyear |
+------+--------------------+--------+---------+-----------+-----------+
|   10 | Ross, Stanley      |  15908 |     199 |      1927 |      1945 |
|   11 | Ross, Stuart       |  12067 |    NULL |      1931 |      1932 |
|   13 | Edwards, Peter     |   9000 |     199 |      1928 |      1958 |
|   26 | Thompson, Bob      |  13000 |     199 |      1930 |      1970 |
|   32 | Smythe, Carol      |   9050 |     199 |      1929 |      1967 |
|   33 | Hayes, Evelyn      |  10100 |     199 |      1931 |      1963 |
|   35 | Evans, Michael     |   5000 |      32 |      1952 |      1974 |
|   37 | Raveen, Lemont     |  11985 |      26 |      1950 |      1974 |
|   55 | James, Mary        |  12000 |     199 |      1920 |      1969 |
|   98 | Williams, Judy     |   9000 |     199 |      1935 |      1969 |
|  129 | Thomas, Tom        |  10000 |     199 |      1941 |      1962 |
|  157 | Jones, Tim         |  12000 |     199 |      1940 |      1960 |
|  199 | Bullock, J.D.      |  27000 |    NULL |      1920 |      1920 |
|  215 | Collins, Joanne    |   7000 |      10 |      1950 |      1971 |
|  430 | Brunet, Paul C.    |  17674 |     129 |      1938 |      1959 |
|  843 | Schmidt, Herman    |  11204 |      26 |      1936 |      1956 |
|  994 | Iwano, Masahiro    |  15641 |     129 |      1944 |      1970 |
| 1110 | Smith, Paul        |   6000 |      33 |      1952 |      1973 |
| 1330 | Onstad, Richard    |   8779 |      13 |      1952 |      1971 |
| 1523 | Zugnoni, Arthur A. |  19868 |     129 |      1928 |      1949 |
| 1639 | Choy, Wanda        |  11160 |      55 |      1947 |      1970 |
| 2398 | Wallace, Maggie J. |   7880 |      26 |      1940 |      1959 |
| 4901 | Bailey, Chas M.    |   8377 |      32 |      1956 |      1975 |
| 5119 | Bono, Sonny        |  13621 |      55 |      1939 |      1963 |
| 5219 | Schwarz, Jason B.  |  13374 |      33 |      1944 |      1959 |
+------+--------------------+--------+---------+-----------+-----------+
25 rows in set (0.00 sec)



2) List the name of all departments in alphabetical order. Note: by "name" we mean the name attribute for all tuples in the jbdept relation.

```{sql connection= db }

SELECT name 
FROM jbdept
ORDER BY name;

```
+------------------+
| name             |
+------------------+
| Bargain          |
| Book             |
| Candy            |
| Children's       |
| Children's       |
| Furniture        |
| Giftwrap         |
| Jewelry          |
| Junior Miss      |
| Junior's         |
| Linens           |
| Major Appliances |
| Men's            |
| Sportswear       |
| Stationary       |
| Toys             |
| Women's          |
| Women's          |
| Women's          |
+------------------+
19 rows in set (0.00 sec)




3) What parts are not in store, i.e. qoh = 0? (qoh = Quantity On Hand)
```{sql connection= db }

SELECT * 
FROM jbparts 
WHERE qoh = 0;
```

+----+-------------------+-------+--------+------+
| id | name              | color | weight | qoh  |
+----+-------------------+-------+--------+------+
| 11 | card reader       | gray  |    327 |    0 |
| 12 | card punch        | gray  |    427 |    0 |
| 13 | paper tape reader | black |    107 |    0 |
| 14 | paper tape punch  | black |    147 |    0 |
+----+-------------------+-------+--------+------+
4 rows in set (0.00 sec)





4) Which employees have a salary between 9000 (included) and 10000 (included)?

```{sql connection= db }

SELECT * 
FROM jbemployee 
WHERE salary BETWEEN 9000 AND 10000;

```
+-----+----------------+--------+---------+-----------+-----------+
| id  | name           | salary | manager | birthyear | startyear |
+-----+----------------+--------+---------+-----------+-----------+
|  13 | Edwards, Peter |   9000 |     199 |      1928 |      1958 |
|  32 | Smythe, Carol  |   9050 |     199 |      1929 |      1967 |
|  98 | Williams, Judy |   9000 |     199 |      1935 |      1969 |
| 129 | Thomas, Tom    |  10000 |     199 |      1941 |      1962 |
+-----+----------------+--------+---------+-----------+-----------+
4 rows in set (0.00 sec)

5) What was the age of each employee when they started working (startyear)?

```{sql connection= db }

SELECT id, name, startyear-birthyear
FROM jbemployee;
```
+------+--------------------+---------------------+
| id   | name               | startyear-birthyear |
+------+--------------------+---------------------+
|   10 | Ross, Stanley      |                  18 |
|   11 | Ross, Stuart       |                   1 |
|   13 | Edwards, Peter     |                  30 |
|   26 | Thompson, Bob      |                  40 |
|   32 | Smythe, Carol      |                  38 |
|   33 | Hayes, Evelyn      |                  32 |
|   35 | Evans, Michael     |                  22 |
|   37 | Raveen, Lemont     |                  24 |
|   55 | James, Mary        |                  49 |
|   98 | Williams, Judy     |                  34 |
|  129 | Thomas, Tom        |                  21 |
|  157 | Jones, Tim         |                  20 |
|  199 | Bullock, J.D.      |                   0 |
|  215 | Collins, Joanne    |                  21 |
|  430 | Brunet, Paul C.    |                  21 |
|  843 | Schmidt, Herman    |                  20 |
|  994 | Iwano, Masahiro    |                  26 |
| 1110 | Smith, Paul        |                  21 |
| 1330 | Onstad, Richard    |                  19 |
| 1523 | Zugnoni, Arthur A. |                  21 |
| 1639 | Choy, Wanda        |                  23 |
| 2398 | Wallace, Maggie J. |                  19 |
| 4901 | Bailey, Chas M.    |                  19 |
| 5119 | Bono, Sonny        |                  24 |
| 5219 | Schwarz, Jason B.  |                  15 |
+------+--------------------+---------------------+
25 rows in set (0.00 sec)


6) Which employees have a last name ending with "son"?

```{sql connection= db }

SELECT *  FROM jbemployee WHERE name LIKE "%son,%";

```
+----+---------------+--------+---------+-----------+-----------+
| id | name          | salary | manager | birthyear | startyear |
+----+---------------+--------+---------+-----------+-----------+
| 26 | Thompson, Bob |  13000 |     199 |      1930 |      1970 |
+----+---------------+--------+---------+-----------+-----------+
1 row in set (0.00 sec)


7) Which items (note items, not parts) have been delivered by a supplier called Fisher-Price? Formulate this query using a subquery in the where-clause.

```{sql connection= db }

select jbitem.name, jbitem.supplier
from jbitem 
where jbitem.supplier =
  (select jbsupplier.id
   from jbsupplier
   where name = "Fisher-Price");

```
+-----------------+----------+
| name            | supplier |
+-----------------+----------+
| Maze            |       89 |
| The 'Feel' Book |       89 |
| Squeeze Ball    |       89 |
+-----------------+----------+




8) Formulate the same query as above, but without a subquery.

```{sql connection= db }

select jbitem.* from jbsupplier
inner join jbitem
on jbitem.supplier = jbsupplier.id
where jbsupplier.name = 'Fisher-Price';
```

+-----------------+----------+
| name            | supplier |
+-----------------+----------+
| Maze            |       89 |
| The 'Feel' Book |       89 |
| Squeeze Ball    |       89 |
+-----------------+----------+


3 rows in set (0.00 sec)


9) Show all cities that have suppliers located in them. Formulate this query using a subquery in the where-clause.

```{sql connection= db }

select jbcity.name, jbcity.id
from jbcity
where jbcity.id in
  (select jbsupplier.city
  from jbsupplier);
```
+----------------+-----+
| name           | id  |
+----------------+-----+
| Amherst        |  10 |
| Boston         |  21 |
| New York       | 100 |
| White Plains   | 106 |
| Hickville      | 118 |
| Atlanta        | 303 |
| Madison        | 537 |
| Paxton         | 609 |
| Dallas         | 752 |
| Denver         | 802 |
| Salt Lake City | 841 |
| Los Angeles    | 900 |
| San Diego      | 921 |
| San Francisco  | 941 |
| Seattle        | 981 |
+----------------+-----+
15 rows in set (0.00 sec)



10)What is the name and color of the parts that are heavier than a card reader? Formulate this query using a subquery in the where-clause. (The SQL query must not contain the weight as a constant.)

```{sql connection= db }

select name,color 
from jbparts 
where weight > 
  (select weight 
  from jbparts 
  where name='card reader');
  
```
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)


11) Formulate the same query as above, but without a subquery. (The query must not contain the weight as a constant.)


```{sql connection= db }

SELECT A.name,A.color 
FROM jbparts as A,jbparts as B 
WHERE A.weight > B.weight 
  AND B.name='card reader';
  
```

+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.01 sec)


12)What is the average weight of black parts? 


```{sql connection= db }

SELECT AVG(jbparts.weight) 
FROM jbparts 
WHERE jbparts.color = "black";

```
+---------------------+
| AVG(jbparts.weight) |
+---------------------+
|            347.2500 |
+---------------------+
1 row in set (0.01 sec)


13)What is the total weight of all parts that each supplier in Massachusetts ("Mass") has delivered? Retrieve the name and the total weight for each of these suppliers. Do not forget to take the quantity of delivered parts into account. Note that one row should be returned for each supplier.


```{sql connection= db }

SELECT jbsupplier.name, SUM(jbsupply.quan*jbparts.weight), jbsupplier.city, jbcity.state

FROM jbsupplier, jbparts, jbcity, jbsupply

WHERE jbcity.state = "Mass" AND
jbcity.id = jbsupplier.city AND
jbparts.id = jbsupply.part AND
jbsupply.supplier = jbsupplier.id

GROUP BY jbsupplier.id;

```
+--------------+-----------------------------------+------+-------+
| name         | SUM(jbsupply.quan*jbparts.weight) | city | state |
+--------------+-----------------------------------+------+-------+
| Fisher-Price |                           1135000 |   21 | Mass  |
| DEC          |                              3120 |   10 | Mass  |
+--------------+-----------------------------------+------+-------+




14) Create a new relation (a table), with the same attributes as the table items using the CREATE TABLE syntax where you define every attribute explicitly (i.e. not as a copy of another table). Then fill the table with all items that cost less than the average price for items. Remember to define primary and foreign keys in your table!
```{sql connection= db }

create table my_new_jbitem (id int , 
name varchar(20), 
dept int , 
price int, 
qoh int, 
supplier int, 
PRIMARY KEY (id), 
KEY fk_item_copy_dept (dept), 
KEY fk_item_copy_supplier (supplier), 
CONSTRAINT fk_item_copy_dept FOREIGN KEY(dept) REFERENCES jbdept(id), 
CONSTRAINT fk_item_copy_supplier FOREIGN KEY(supplier) REFERENCES jbsupplier(id)); 

insert into my_new_jbitem 
select * 
from jbitem 
where price < (select AVG(price) from jbitem);

select * 
from my_new_jbitem; 

```
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  11 | Wash Cloth      |    1 |    75 |  575 |      213 |
|  19 | Bellbottoms     |   43 |   450 |  600 |       33 |
|  21 | ABC Blocks      |    1 |   198 |  405 |      125 |
|  23 | 1 lb Box        |   10 |   215 |  100 |       42 |
|  25 | 2 lb Box, Mix   |   10 |   450 |   75 |       42 |
|  26 | Earrings        |   14 |  1000 |   20 |      199 |
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 106 | Clock Book      |   49 |   198 |  150 |      125 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 118 | Towels, Bath    |   26 |   250 | 1000 |      213 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
| 120 | Twin Sheet      |   26 |   800 |  750 |      213 |
| 165 | Jean            |   65 |   825 |  500 |       33 |
| 258 | Shirt           |   58 |   650 | 1200 |       33 |
+-----+-----------------+------+-------+------+----------+
14 rows in set (0.00 sec)

